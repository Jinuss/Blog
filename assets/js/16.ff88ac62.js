(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{347:function(e,t,v){"use strict";v.r(t);var o=v(4),_=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"vue-router-源码浅析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-源码浅析"}},[e._v("#")]),e._v(" vue router 源码浅析")]),e._v(" "),t("h4",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("h4",{attrs:{id:"常用属性介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用属性介绍"}},[e._v("#")]),e._v(" 常用属性介绍")]),e._v(" "),t("h5",{attrs:{id:"routerlink"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#routerlink"}},[e._v("#")]),e._v(" "),t("code",[e._v("RouterLink")])]),e._v(" "),t("p",[t("code",[e._v("RouterLink")]),e._v("实际上就是通过 vue 的"),t("code",[e._v("defineComponent")]),e._v("方法定义的组件，创建一个"),t("code",[e._v("<a>")]),e._v("标签, 该组件内部会调用"),t("code",[e._v("useLink()")]),e._v("方法,这个"),t("code",[e._v("useLink")]),e._v("会根据参数 props 创建响应式的链接属性，以及处理链接事件")]),e._v(" "),t("h5",{attrs:{id:"routerview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#routerview"}},[e._v("#")]),e._v(" "),t("code",[e._v("RouterView")])]),e._v(" "),t("p",[t("code",[e._v("RouterView")]),e._v("同上，也是 vue 的"),t("code",[e._v("defineComponent")]),e._v("定义的组件")]),e._v(" "),t("h4",{attrs:{id:"常用-api-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用-api-介绍"}},[e._v("#")]),e._v(" 常用 API 介绍")]),e._v(" "),t("h5",{attrs:{id:"createrouter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createrouter"}},[e._v("#")]),e._v(" "),t("code",[e._v("createRouter")])]),e._v(" "),t("p",[t("code",[e._v("createRouter")]),e._v(" 方法用来创建一个路由实例，该方法接收一个参数，该参数是一个对象，该对象用来配置路由实例，")]),e._v(" "),t("h5",{attrs:{id:"createwebhistory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createwebhistory"}},[e._v("#")]),e._v(" "),t("code",[e._v("createWebHistory")])]),e._v(" "),t("p",[t("code",[e._v("createWebHistory")]),e._v("创建一个 history 模式路由, 返回一个 routerHistory 对象。该对象提供了以下方法："),t("code",[e._v("go")]),e._v("、"),t("code",[e._v("replace")]),e._v("、"),t("code",[e._v("push")]),e._v("、"),t("code",[e._v("listen")]),e._v("、"),t("code",[e._v("destory")]),e._v("、"),t("code",[e._v("pauselisten")]),e._v("等方法以及"),t("code",[e._v("location")]),e._v("和"),t("code",[e._v("state")]),e._v("对象。")]),e._v(" "),t("p",[t("code",[e._v("createWebHistory")]),e._v("方法中主要用到了"),t("code",[e._v("useHistoryStatenavigation")]),e._v("和"),t("code",[e._v("useHistoryListeners")]),e._v("方法.")]),e._v(" "),t("blockquote",[t("p",[e._v("实现步骤： 1.接收一个参数"),t("code",[e._v("base")]),e._v(",调用"),t("code",[e._v("normalizeBase")]),e._v("方法进行路由规范化处理，去除协议和域名部分，确保路由以"),t("code",[e._v("/")]),e._v("开头和不以"),t("code",[e._v("/")]),e._v("结尾 2.调用"),t("code",[e._v("useHistoryStatenavigation")]),e._v("方法，创建一个"),t("code",[e._v("navigation")]),e._v("对象，用于记录路由变化和状态 3.调用"),t("code",[e._v("useHistoryListeners")]),e._v("方法，创建一个"),t("code",[e._v("listeners")]),e._v("对象，用于记录路由变化监听器 4.赋值 2、3 的返回给"),t("code",[e._v("routerHistory")]),e._v("，并返回")])]),e._v(" "),t("h6",{attrs:{id:"usehistorystatenavigation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usehistorystatenavigation"}},[e._v("#")]),e._v(" "),t("code",[e._v("useHistoryStateNavigation")])]),e._v(" "),t("p",[t("code",[e._v("useHistoryStateNavigation")]),e._v("方法首先会根据"),t("code",[e._v("window.location")]),e._v("和 base 获取当前的路由值, 然后判断"),t("code",[e._v("window.history.state")]),e._v(",如果其不为空则调用"),t("code",[e._v("changeLocation")]),e._v("在其内部调用"),t("code",[e._v("window.history.replaceState")]),e._v("或者"),t("code",[e._v("window.history.pushState")]),e._v(",最后改变 state 的值。")]),e._v(" "),t("p",[t("code",[e._v("useHistoryStateNavigation")]),e._v("方法返回的"),t("code",[e._v("push")]),e._v("和"),t("code",[e._v("replace")]),e._v("方法均会调用"),t("code",[e._v("changeLocation")]),e._v("方法，其中"),t("code",[e._v("push")]),e._v("会调用两次")]),e._v(" "),t("h6",{attrs:{id:"usehistorylisteners"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usehistorylisteners"}},[e._v("#")]),e._v(" "),t("code",[e._v("useHistoryListeners")])]),e._v(" "),t("p",[t("code",[e._v("useHistoryListeners")]),e._v("方法接收四个参数"),t("code",[e._v("base")]),e._v("、调用"),t("code",[e._v("useHistoryStateNavigation")]),e._v("方法返回的"),t("code",[e._v("state")]),e._v("、"),t("code",[e._v("location")]),e._v("属性和"),t("code",[e._v("replace")]),e._v("方法\n其内部实现主要逻辑是监听"),t("code",[e._v("popstate")]),e._v("和"),t("code",[e._v("beforeunload")]),e._v("事件，执行相应的路由切换逻辑，从而实现前端路由的控制和管理")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("popstate")]),e._v("事件：浏览器的历史记录发生变化（用户的执行某些导航操作，如点击浏览器的前进、后退按钮或者通过 javascript 调用"),t("code",[e._v("history.pushState")]),e._v("、"),t("code",[e._v("history.replaceState")]),e._v("、"),t("code",[e._v("history.back()")]),e._v("和"),t("code",[e._v("history.forward()")]),e._v("等方法时会触发，触发"),t("code",[e._v("popstate")]),e._v("事件，"),t("code",[e._v("vue router")]),e._v("内部会执行"),t("code",[e._v("popStateHandler")]),e._v("函数，"),t("code",[e._v("popStateHandler")]),e._v("函数主要是判断"),t("code",[e._v("state")]),e._v(",如果"),t("code",[e._v("state")]),e._v("存在，则更新当前位置、历史状态并计算位置偏移值；如果"),t("code",[e._v("state")]),e._v("不存在，则调用"),t("code",[e._v("replace")]),e._v("方法更新。最后遍历了注册的所有监听器"),t("code",[e._v("listeners")]),e._v("并执行监听器, 传参为三个："),t("code",[e._v("currentLocation.value")]),e._v("：当前位置信息、"),t("code",[e._v("from")]),e._v(":之前的位置信息、路由变化的对象："),t("code",[e._v("delta")]),e._v("、"),t("code",[e._v("type")]),e._v(":'pop'、"),t("code",[e._v("direction")]),e._v("：正负表示前进、后退还是未知方向")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("beforeunload")]),e._v("事件：用于在用户即将离开当前页面（关闭页面、刷新页面、导航到其他页面）时触发，触发该事件时，"),t("code",[e._v("vue router")]),e._v("会执行"),t("code",[e._v("beforeUnloadListener")]),e._v("函数，调用"),t("code",[e._v("history.replaceState")]),e._v("方法")])]),e._v(" "),t("p",[e._v("以上两个监听的事件会在"),t("code",[e._v("destory")]),e._v("函数中移除")]),e._v(" "),t("h5",{attrs:{id:"createwebhashhistory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#createwebhashhistory"}},[e._v("#")]),e._v(" "),t("code",[e._v("createWebHashHistory")])]),e._v(" "),t("p",[t("code",[e._v("createWebHashHistory")]),e._v(" 会创建一个 hash 模式的路由，同"),t("code",[e._v("createWebHistory")]),e._v("一样，接收一个参数"),t("code",[e._v("base")]),e._v("，会自动给 base 加上"),t("code",[e._v("#")]),e._v("，再调用"),t("code",[e._v("createWebHistory")]),e._v("并返回")]),e._v(" "),t("h5",{attrs:{id:"creatememoryhistory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creatememoryhistory"}},[e._v("#")]),e._v(" "),t("code",[e._v("createMemoryHistory")])]),e._v(" "),t("p",[t("code",[e._v("createMemoryHistory")]),e._v(" 会基于内存创建一个 history，主要用于处理服务端渲染 SSR，即不依赖于浏览器的实际 url 地址变化，而是在内存中维护路由历史记录。")]),e._v(" "),t("p",[t("code",[e._v("createMemoryHistory")]),e._v(" 返回的是一个"),t("code",[e._v("routerHistory")]),e._v("对象,这个对象包含"),t("code",[e._v("replace")]),e._v("、"),t("code",[e._v("push")]),e._v("、"),t("code",[e._v("listen")]),e._v("、"),t("code",[e._v("destroy")]),e._v("、"),t("code",[e._v("go")]),e._v("方法。"),t("code",[e._v("createMemoryHistory")]),e._v("内部维护了两个数组"),t("code",[e._v("listeners")]),e._v("、"),t("code",[e._v("quue")]),e._v("，"),t("code",[e._v("listeners")]),e._v("用于记录"),t("code",[e._v("listen")]),e._v("方法注册的回调函数，"),t("code",[e._v("queue")]),e._v("用于记录路由历史记录，可以被当作一个路由队列。")])])}),[],!1,null,null,null);t.default=_.exports}}]);